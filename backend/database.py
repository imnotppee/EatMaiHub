from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
import os
import psycopg2
from dotenv import load_dotenv
from urllib.parse import urlparse

# -------------------- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env --------------------
# ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á .env ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
env_path = os.path.join(os.path.dirname(__file__), "..", ".env")
load_dotenv(env_path)

# -------------------- ‡∏î‡∏∂‡∏á DATABASE_URL --------------------
DATABASE_URL = os.getenv("DATABASE_URL")

# ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô .env ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fallback (‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á)
if not DATABASE_URL:
    DATABASE_URL = "postgresql://postgres:1234@10.117.10.236:5432/Eat_Mai_Hub"

# -------------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SQLAlchemy Engine --------------------
engine = create_engine(DATABASE_URL)

# ‚úÖ Session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ORM
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# ‚úÖ Base ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Model
Base = declarative_base()


# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ORM --------------------
def get_db():
    """‡πÉ‡∏ä‡πâ‡πÉ‡∏ô route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ORM (‡πÄ‡∏ä‡πà‡∏ô FastAPI Depends)"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô psycopg2 --------------------
def get_conn():
    """‡πÉ‡∏ä‡πâ‡πÉ‡∏ô route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ query ‡πÅ‡∏ö‡∏ö raw SQL (cursor)"""
    try:
        result = urlparse(DATABASE_URL)
        return psycopg2.connect(
            host=result.hostname,
            database=result.path.lstrip("/"),
            user=result.username,
            password=result.password,
            port=result.port,
        )
    except Exception as e:
        print("‚ùå ERROR connecting PostgreSQL:", e)
        raise e


# -------------------- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (optional) --------------------
if __name__ == "__main__":
    print("üîç Checking database connection...")
    try:
        conn = get_conn()
        print("‚úÖ psycopg2 connected successfully.")
        conn.close()
    except Exception as e:
        print("‚ùå psycopg2 connection failed:", e)

    try:
        with engine.connect() as connection:
            print("‚úÖ SQLAlchemy engine connected successfully.")
    except Exception as e:
        print("‚ùå SQLAlchemy connection failed:", e)
